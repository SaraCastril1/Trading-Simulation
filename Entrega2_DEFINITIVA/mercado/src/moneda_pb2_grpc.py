# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import moneda_pb2 as moneda__pb2


class ParametersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.conexion_up = channel.unary_unary(
                '/Parameters/conexion_up',
                request_serializer=moneda__pb2.ping.SerializeToString,
                response_deserializer=moneda__pb2.ACK.FromString,
                )
        self.send_parameters = channel.unary_unary(
                '/Parameters/send_parameters',
                request_serializer=moneda__pb2.message_parameters.SerializeToString,
                response_deserializer=moneda__pb2.ACK.FromString,
                )


class ParametersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def conexion_up(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_parameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'conexion_up': grpc.unary_unary_rpc_method_handler(
                    servicer.conexion_up,
                    request_deserializer=moneda__pb2.ping.FromString,
                    response_serializer=moneda__pb2.ACK.SerializeToString,
            ),
            'send_parameters': grpc.unary_unary_rpc_method_handler(
                    servicer.send_parameters,
                    request_deserializer=moneda__pb2.message_parameters.FromString,
                    response_serializer=moneda__pb2.ACK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Parameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Parameters(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def conexion_up(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Parameters/conexion_up',
            moneda__pb2.ping.SerializeToString,
            moneda__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_parameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Parameters/send_parameters',
            moneda__pb2.message_parameters.SerializeToString,
            moneda__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
